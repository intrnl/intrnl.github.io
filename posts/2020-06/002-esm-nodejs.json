{
	"data": {
		"title": "ESM in Node.js is still full of landmines",
		"description": "And how we can do our parts to fix it",
		"date": "2020-06-06T00:00:00.000Z"
	},
	"html": "<p>I can't tell how long I've been waiting for ES Modules support to hit Node.js,\nand when Node.js 13.2.0 finally unflagged the experimental support, I was\npretty excited for the future where we're no longer bound to using CommonJS.</p>\n<p>Except I've forgotten all about it.</p>\n<p>Recently, I published several packages to NPM, which I also use in my projects,\nboth public and private. They all use ES Modules, with no transformation step\ndone before publishing, it's only using the <code>type</code> field of <code>package.json</code> to\nlet Node.js know that it's an ES Module package. I've been thinking that I\nshould add unit testing to them too so I don't have any worries about\naccidentally breaking stuff, but here's where it hits me.</p>\n<p>As of the writing of this post, there hasn't been any test runners that fully\nsupports ES Modules in Node.js.</p>\n<p>Not only that, I've realized that my code doesn't exactly work on Node.js\neither because it does not use the widely used <code>module</code> field of <code>package.json</code>\nthat most packages use. So it would import the CommonJS version of the package,\nand throws an error because you can't use named imports on them.</p>\n<p>This isn't something that Node.js committee can fix by themselves, they also\nneed our help to do our parts as well.</p>\n<h2>How we can fix it</h2>\n<p>To mark an entire package as being fully written in ESM, you know full well\nfrom above that you can set the <code>type</code> field to <code>module</code>.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"awesome-library\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This should be fine for most packages, however it comes with a downside where\nolder Node.js versions can't actually use them.</p>\n<p>However, if you have a transformation step going, you can use the <code>exports</code>\nfield instead to indicate that there are multiple versions of the same entry\npoints.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"exports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\".\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/cjs/awesome-library.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/module/awesome-library.js\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"./submodule\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"require\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/cjs/submodule/index.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"import\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist/module/submodule/index.js\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>As with anything, this also comes with a downside with end users not being able\nto poke around random files on the library, which might not be bad, but it\ncomes off as a breaking change for them.</p>\n<p>To remedy that, you are able the directories that your end users can use.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"exports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"./lib\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./lib/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"./lib/\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./lib/\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Conclusion</h2>\n<p>The morale of the story? Avoid using experimental features whenever you can,\nbut if I were to be honest, if we always avoid them, then we can't provide the\nactual opinion and feedback that can be used to make that feature better, and\nhopefully make them suitable for production usage.</p>"
}